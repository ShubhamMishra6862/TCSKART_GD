package org.tcskart.order.service;

import java.time.Duration;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.tcskart.order.beans.Order;
import org.tcskart.order.beans.OrderItem;
import org.tcskart.order.dto.CartDTO;
import org.tcskart.order.dto.CartItemDTO;
import org.tcskart.order.dto.OrderProduct;
import org.tcskart.order.feinclient.CartClient;
import org.tcskart.order.repository.OrderItemRepository;
import org.tcskart.order.repository.OrderRepository;


@Service
public class OrderServiceImplimentation implements OrderService{
	
	@Autowired
	private OrderRepository repo;
	@Autowired
	private OrderItemRepository repoItem;
	
	@Autowired
	EmailService eservice;

	@Autowired
	private CartClient  cartClient;

	@Override
	public List<OrderItem> getAllOrdersByUserId(Long userId) {
		List<OrderItem> orderItems=repoItem.findall(userId);
		return orderItems;
		
	}
	

	
	@Override
	public List<String> trackOrderStatus(Long userId) {
	    List<Order> userOrders = repo.findByUserId(userId);
	    List<String> statusList = new ArrayList<>();

	    for (Order order : userOrders) {
	        LocalDateTime orderTime = order.getOrderDate();
	        LocalDateTime now = LocalDateTime.now();
	        Duration duration = Duration.between(orderTime, now);
	        long minutesPassed = duration.toMinutes();

	        String dynamicStatus;

	        if (minutesPassed < 2) {
	            dynamicStatus = "PENDING";
	        } else if (minutesPassed < 5) {
	            dynamicStatus = "SHIPPED";
	        } else {
	            dynamicStatus = "DELIVERED";
	        }

	        String status = "Order ID: " + order.getOrderId() +
	                        ", Status: " + dynamicStatus +
	                        ", Date: " + orderTime +
	                        ", Total Amount: â‚¹" + order.getTotalAmount();
	        statusList.add(status);
	    }

	    return statusList;
	}


	@Override
	public Order placeOrder(Long userId) {
		// 1. Fetch cart items from cart service using Feign
		List<CartDTO> cartItemList = cartClient.getCartItemsByUserId(userId);
        System.out.println(cartItemList.size());
		if (cartItemList == null || cartItemList.isEmpty()) {
			throw new RuntimeException("Cart is empty for user ID: " + userId);
		}

		// 2. Create a new order
		Order order = new Order();
		order.setUserId(userId);
		order.setOrderstatus("PLACED");
		order.setPaymentMode("CashOnDelivery");
		order.setOrderDate(LocalDateTime.now());
		order.setTotalAmount(0L); // initially 0
		Order savedOrder = repo.save(order);

		// 3. Add all items and calculate total
		long totalAmount = 0L;
		 List<OrderProduct> productList = new ArrayList<>();

		for (CartDTO cartItemDTO : cartItemList) {
			OrderItem item = new OrderItem();
			item.setProductId(cartItemDTO.getProductId());
			item.setQuantity(cartItemDTO.getQuantity());
			item.setAmount(cartItemDTO.getTotalPrice());
			item.setOrder(savedOrder);

			totalAmount += cartItemDTO.getTotalPrice();
			repoItem.save(item);
			 productList.add(new OrderProduct(
			            cartItemDTO.getProductId(),
			            cartItemDTO.getQuantity(),
			            cartItemDTO.getTotalPrice()
			        ));
		}

		// 4. Update order with total amount
		savedOrder.setTotalAmount(totalAmount);
		
		return repo.save(savedOrder);
	}




}

